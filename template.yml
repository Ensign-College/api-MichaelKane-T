AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Resources:
  MyElasticacheSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: Subnet group for ElastiCache
      SubnetIds:
        - subnet-02c217f126c0ce1d5 
    Role: !Ref SeansLambdaRole    

  SeansLambdaRole:
   Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      # Policies:
      #   - PolicyName: root
      #     PolicyDocument:
      #       Version: '2012-10-17'
      #       Statement:
      #         - Effect: Allow
      #           Action:
      #             - logs:CreateLogGroup
      #             - logs:CreateLogStream
      #             - logs:PutLogEvents
      #           Resource: arn:aws:logs:*:*:*
      #         - Effect: Allow
      #           Action:
      #             - elasticache:DescribeCacheClusters
      #             - elasticache:DescribeCacheSubnetGroups
      #             - elasticache:DescribeEngineVersions
      #             - elasticache:DescribeEvents
      #             - elasticache:DescribeReplicationGroups
      #             - elasticache:ListAllowedNodeTypeModifications
      #             - elasticache:ListTagsForResource
      #             - elasticache:ModifyCacheCluster
      #             - elasticache:ModifyCacheSubnetGroup
      #             - elasticache:ModifyReplicationGroup
      #             - elasticache:RebootCacheCluster
      #             - elasticache:ResetCacheParameterGroup
      #             - elasticache:TagResource
      #             - elasticache:UntagResource
      #           Resource: "*"

  MyElasticacheRedis:
    Type: 'AWS::ElastiCache::CacheCluster'
    Properties:
      CacheNodeType: cache.t2.micro
      Engine: redis
      NumCacheNodes: 1
      Port: 6379
      VpcSecurityGroupIds:
       - !GetAtt MySecurityGroup.GroupId
      CacheSubnetGroupName: !Ref MyElasticacheSubnetGroup

  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda function
      VpcId: vpc-066e6a637e37f2752
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          CidrIp: 0.0.0.0/0

  MyLambdaFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: index.handler
      Runtime: nodejs20.x
      CodeUri: .
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          REDIS_HOST: !GetAtt MyElasticacheRedis.RedisEndpoint.Address
          REDIS_PORT: 6379
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt MySecurityGroup.GroupId
        SubnetIds:
          - subnet-02c217f126c0ce1d5  # Add your subnet ID here
      
      Events:
        MyApi:
          Type: Api
          Properties:
            Path: /api
            Method: get
        MyApi2:
          Type: Api
          Properties:
            Path: /api/data
            Method: post


